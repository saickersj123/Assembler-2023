#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Include the provided header file
#include "my_assembler.h"

// ...

// Define the opcode for END statement
#define END_OPCODE "END"

// Helper function to add a symbol to the symbol table
void add_to_sym_table(uchar *symbol, int addr) {
    strcpy(sym_table[inst_index].symbol, symbol);
    sym_table[inst_index].addr = addr;
    inst_index++;
}

// Helper function to calculate the length of the program
void calculate_program_length(void) {
    program_length = locctr - starting_address;
}

// Helper function to handle the START directive
void handle_start_directive(uchar *label, uchar *operand) {
    starting_address = strtol(operand, NULL, 16); // Convert hex string to integer
    locctr = starting_address;
    add_to_sym_table(label, starting_address);
}

// Helper function to handle the END directive
void handle_end_directive(uchar *operand) {
    calculate_program_length();
    // Add the program length as a symbol
    add_to_sym_table(operand, program_length);
}

// Helper function to handle labels and symbols
void handle_label_and_symbol(uchar *label, uchar *operand, int is_instruction) {
    if (label[0] != '\0') { // If there is a label
        add_to_sym_table(label, locctr);
        if (is_instruction) {
            // Increment location counter based on instruction format
            if (operand[0] != '\0') {
                if (operand[0] == '+') {
                    locctr += 4; // Format 4
                } else {
                    locctr += 3; // Format 3
                }
            } else {
                locctr += 3; // Default to format 3
            }
        }
    }
}

// Function to perform pass 1 of the assembly process
static int assem_pass1(void) {
    // Initialize the instruction index
    inst_index = 0;

    // Initialize location counter and other variables
    locctr = 0;
    starting_address = 0;
    program_length = 0;

    // Loop through the input data and process each line
    for (int i = 0; i < line_num; i++) {
        uchar *current_line = input_data[i];

        // Tokenize the current line
        token_parsing(current_line);

        // Extract label, operator, and operand from the token table
        uchar *label = token_table[i]->label;
        uchar *operator = token_table[i]->operator;
        uchar *operand = token_table[i]->operand[0];

        // Check for assembler directives and instructions
        if (strcmp(operator, "START") == 0) {
            handle_start_directive(label, operand);
        } else if (strcmp(operator, END_OPCODE) == 0) {
            handle_end_directive(operand);
        } else {
            // Handle labels and symbols for instructions
            handle_label_and_symbol(label, operand, 1);
        }
    }

    return 0;
}

int token_parsing(uchar *str) {
    // 초기화
    token_table[token_line] = malloc(sizeof(token));
    if (token_table[token_line] == NULL) {
        fprintf(stderr, "Error: Memory allocation failed.\n");
        return -1;
    }
    token_table[token_line]->label = NULL;
    token_table[token_line]->operator = NULL;
    for (int i = 0; i < MAX_OPERAND; i++) {
    token_table[token_line]->operand[i][0] = '\0';
    }
    //token_table[token_line]->comment[0] = '\0';

    // 빈 줄이거나 주석인 경우 처리
   if (str[0] == '\0' || str[0] == '\n' || str[0] == '.') {
        return 0;
    }
    uchar *scopy = NULL;
    scopy = strdup((char *) str);

    // 문자열을 공백을 기준으로 토큰화
    uchar *token_str = NULL;
    token_str = strtok(scopy, " \t");


    // 첫 번째 토큰이 operator인지 확인
    int is_operator = search_opcode(token_str);

    if (is_operator == 0) {
        // 첫 번째 토큰이 operator인 경우
        token_table[token_line]->operator = strdup(token_str);
        token_str = strtok(NULL, " \t"); // 오퍼레이터 파싱 건너뛰기
    } else if(is_operator == 1){
        // 첫 번째 토큰이 operator가 아닌 경우 label로 처리
        token_table[token_line]->label = strdup(token_str);
        token_str = strtok(NULL, " \t\n"); // 다음 토큰으로 이동
        // 오퍼레이터 파싱
        if (token_str != NULL) {
        token_table[token_line]->operator = strdup(token_str);
        token_str = strtok(NULL, " \t\n"); // 다음 토큰으로 이동
        } else {
        fprintf(stderr, "Error: Operator missing.\n");
        return -1;
        }
    }


       // 피연산자 파싱
    int operand_index = 0;
    while (token_str != NULL) {
        if (operand_index < MAX_OPERAND) {
            // 여러 피연산자가 ','로 구분된 경우 처리
            if (strchr(token_str, ',')) {
                char *operand_token = strtok(token_str, ",");
                while (operand_token != NULL) {                   
                    strcpy((char *)token_table[token_line]->operand[operand_index], operand_token);
                    operand_token = strtok(NULL, ",\t");
                    operand_index++;
                }
            } else {
                // ','로 구분되지 않은 경우 피연산자 처리 후 종료
                strcpy((char *)token_table[token_line]->operand[operand_index], token_str);
                operand_index++;
                token_str = strtok(NULL, "\t");
                break;
            }
        } else {
            fprintf(stderr, "Error: Too many operands.\n");
            free(scopy);
            return -1;
        }
        token_str = strtok(NULL, " \t\n"); // 다음 토큰으로 이동
    }
    

    /* 피연산자 이후의 문자열은 주석으로 처리
    if (token_str != NULL) {
        strcpy(token_table[token_line]->comment, token_str);
    }
    else {
        strcpy(token_table[token_line]->comment, "");
    }*/
    
    free(scopy);

    // 테스트 출력문
    printf("Line %d\n", token_line + 1);
    printf("Label: %s\n", token_table[token_line]->label);
    printf("Operator: %s\n", token_table[token_line]->operator);
    printf("Operands: \n");
    for (int i = 0; i < operand_index; i++) {
        printf("  %s\n", token_table[token_line]->operand[i]);
    }
    //printf("Comment: %s\n", token_table[token_line]->comment);

    return 0;
}